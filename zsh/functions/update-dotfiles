# shellcheck disable=SC2148

autoload -U colors && colors

local hostsfile="$HOME/.dotfiles-hosts"
if [[ ! -f "$hostsfile" ]]; then
  >&2 echo $fg[green]$hostsfile$reset_color does not exist. Please create it with one line per host to update dotfiles on.
  return 1
fi

if [[ ! -d "${DOTFILES?Variable is not set}" ]]; then
  >&2 echo $fg[green]$DOTFILES$reset_color does not exist.
  return 1
fi

daemon_pidfile="$(mktemp --suffix=git-daemon)"

function dotfiles::cleanup {
  # Clear traps.
  trap - EXIT SIGHUP SIGINT SIGTERM

  dotfiles::stop-git-daemon "$daemon_pidfile"

  unset daemon_pidfile

  unfunction dotfiles::cleanup
  unfunction dotfiles::start-git-daemon
  unfunction dotfiles::stop-git-daemon
  unfunction dotfiles::update
}

function dotfiles::start-git-daemon() {
  local dotfiles="$1"

  git daemon --base-path="$dotfiles/.git" --export-all --informative-errors --listen=localhost --port=55555 --pid-file="$daemon_pidfile" --detach
  [[ $? -eq 0 ]] || return $?
}

function dotfiles::stop-git-daemon() {
  local pidfile="${1?Need pidfile}"

  local pid="$(cat "$pidfile" 2> /dev/null)"

  [[ -n "$pid" ]] && kill -9 "$pid"
  rm -f "$pidfile"
}

function dotfiles::update() {
  local host="$1"
  local cmd="$2"
  local update=$(cat <<UPDATE
echo "Expecting dotfiles in $fg_bold[red]\$DOTFILES$reset_color (currently set to $fg[green]\$DOTFILES$reset_color)" && \
  cd "\$DOTFILES" && \
  git fetch git://localhost:55555/ && \
  git reset --hard FETCH_HEAD && \
  ./bootstrap
UPDATE
)

  if [[ -n "$cmd" ]]; then
    update="$cmd '$update'"
  fi

  printf '\nUpdating dotfiles on %b%s%b\n' "$fg_bold[blue]" "$host" "$reset_color"
  ssh -n -A "$host" -R 55555:localhost:55555 "$update"
}

trap dotfiles::cleanup EXIT SIGHUP SIGINT SIGTERM

dotfiles::start-git-daemon "$DOTFILES"
[[ $? -eq 0 ]] || return $?

local host cmd
while read -r host cmd; do
  dotfiles::update "$host" "$cmd"
done < "$hostsfile"

# vim: set ft=zsh ts=2 sw=2 et:
